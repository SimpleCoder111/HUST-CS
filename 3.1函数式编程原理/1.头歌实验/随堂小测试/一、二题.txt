一、
功能：take和rtake的功能一致，都是从列表中取出前i给元素。take函数每次递归调用自身来处理列表的剩余部分。当i大于0时，将当前元素添加到结果列表中，并将i-1。当i=0时，返回空表。rtake函数使用了尾递归方式，添加了一个taken参数，用来保存已经取出的元素。
性能：rtake函数的性能优于take函数。因为take函数每次递归调用，都会创建新的列表，所以消耗大量的内存，并且当列表较长时，可能会导致栈溢出。而rtake函数使用了尾递归，每次递归调用都会服用之前的栈帧，因此不会导致栈溢出。此外，由于taken参数保存了已经取出的元素，故节省了内存。

二、
nextperm[2,3,1,4]
=>next([2],[3,1,4]) 
=>next([3,2],[1,4]) 
=>swap([3,2]) 
=>3::swap([2])
=>[3, 1, 2, 4] 
因此，调用 nextperm[2,3,1,4] 的计算结果是 [3, 1, 2, 4]